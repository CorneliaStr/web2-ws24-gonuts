type Query {
    tags: [Tag!]!
    products: [Product!]!
    cart(id: ID!) : OrderDTO!
    customer(id: ID!) : CustomerDTO
    orders : [OrderDTO]!
    order(id: ID!): OrderDTO

    product(id: ID!): Product
    favorites(customerid: ID!): Favorites!
}
type Mutation {
    createProduct(product: ProductInput!): Product!
    createTag(tag: TagInput!): Tag!
    addProductToFavorites(customerId: ID!, product: ProductInputWithId): Boolean
    addProductToOrder(product : ProductInput,quantity : Int): OrderDTO
    updateOrder(orderDTO : OrderDTOInput): Boolean
    deleteOrderposition(orderPositionDTO : OrderPositionDTOInput, orderID : ID): OrderDTO
    updateCustomer(customerDTO: CustomerDTOInput): CustomerDTO
    updateProduct(product: ProductInputWithIdUpdate!): Product
    deleteProduct(productID: ID!): Boolean
    updateTag(tag: TagInputWithId!): Tag!
    deleteTag(tagID: ID!): Boolean
}

input ProductInput {
    name: String
    description: String
    price: Float
    image: String
    tags: [ProductTagInput!]!
}

input ProductInputWithId {
    id: ID!
    name: String
    description: String
    price: Float
    image: String
    tags: [TagInput!]!
}

input ProductInputWithIdUpdate {
    id: ID!
    name: String
    description: String
    price: Float
    image: String
    tags: [TagInputWithId]
}

input TagInput {
    name: String!
}
input TagInputWithId {
    id: ID!
    name: String!
}

input ProductTagInput {
    id: ID!
    name: String!
}

type Tag {
    id: ID!
    name: String!
}

type Product {
    id: ID!
    name: String
    description: String
    price: Float
    image: String
    tags: [Tag!]!
}

type OrderDTO{
    id : ID!
    date : String
    orderPosition : [OrderPositionDTO!]!
    customer : CustomerDTO
}


type OrderPositionDTO{
    id : ID!
    order : OrderDTO
    product : Product
    quantity : Float

}

input OrderDTOInput{
    id : ID!
    date : String
    orderPosition : [OrderPositionDTOInput!]!
    customer : CustomerDTOInput
}

input OrderPositionDTOInput{
    id : ID!
    order : OrderDTOInput
    product : ProductInput
    quantity : Float

}


type CustomerDTO{
    id : ID!
    surname : String
    name : String
    birthday : String
    adress : String
}

input CustomerDTOInput{
    id : ID!
    surname : String
    name : String
    birthday : String
    adress : String
}


type Account {
    email: ID!
    password: String
    admin: Boolean
}

type Customer {
    id: ID!
    surname: String
    name: String
    birthday: String
    adress: String
    account: Account!
}

type Favorites {
    id: ID!
    products: [Product!]!
    customer: Customer
}
